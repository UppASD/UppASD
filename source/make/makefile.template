#
#                                  Maintain SD
#
SHELL = /bin/sh

# Note: twice Recursive makefile if writing make <profilename>

# Add file types to the known list of suffixes (file extensions)
.SUFFIXES: .f .f90 .F90

# Program name
PROG = sd
LIBNAME = libuppasd.a
PYNAME = uppasd

PY_SUFFIX := $(shell python3-config --extension-suffix)

# Directories used in Makefile
MDIR   = mod
GPUDIR = gpu_files

# Name of log file
MAKELOG = make.log

# File to store information on current build profile
CURRENT = .profile

# List of available building configs (found in make/default-profiles/systemname.make)
DEFAULT_SYSTEMS := gfortran gfortran-cuda gfortran-osx gfortran-cuda-osx gfortran-win64 ifort ifort-cuda ifort-nomkl ifort-cuda-nomkl pathscale pgf90 pgf90-nomkl jureca gfortran-FC gfortran-wFC gfortran-ftn crayftn-ftn aocc-ftn
LOCAL_SYSTEMS := $(filter-out $(DEFAULT_SYSTEMS),$(shell ls make/user_profiles/*.make | sed 's/make.user_profiles.//' | sed 's/.make//'))
#LOCAL_SYSTEMS := $(shell ls make/user_profiles/*.make | sed 's/make.user_profiles.//' | sed 's/.make//')
SYSTEMS := $(DEFAULT_SYSTEMS) $(LOCAL_SYSTEMS)
#SYSTEMS += $(filter-out $(DEFAULT_SYSTEMS),$(LOCAL_SYSTEMS))

# Check if current profile is set (stored in $(CURRENT)
ifndef PROFILE
CPROFILE := $(shell cat $(CURRENT) 2>/dev/null)
ifneq (,$(filter $(CPROFILE),$(SYSTEMS)))
PROFILE := $(CPROFILE)
endif
endif

# Checking if there is a given environment variable for a building config set
ifndef PROFILE
ifeq ($(origin UPPASD_MAKE_PROFILE),environment)
ifneq (,$(filter $(UPPASD_MAKE_PROFILE),$(SYSTEMS)))
PROFILE=$(UPPASD_MAKE_PROFILE)
else
$(error Invalid value $(UPPASD_MAKE_PROFILE) of UPPASD_MAKE_PROFILE. Choose one from [$(SYSTEMS)])
endif
endif
endif

################################################################################
# Checking if makefile has been run with a profile = buidling configuration argument
# If so, include that profile as well as the CUDA specific make file
################################################################################
ifdef PROFILE
ifneq (,$(filter $(PROFILE),$(SYSTEMS)))
makeprofile = make/user_profiles/$(PROFILE).make

# If file does not exists copy from system folder and send a warning
ifeq ("$(wildcard $(makeprofile))","")
.DEFAULT_GOAL=copyprofile

else

ifdef COMPILENOW
include $(makeprofile)

ifdef LIBRARY
	FCFLAGS:=$(FCFLAGS) -fPIC
	CCFLAGS:=$(CCFLAGS) -fPIC
endif

################################################################################
#Check if c/cuda files should be added
################################################################################
ifneq ($(USE_CUDA),NO)
include make/makefileCUDA
endif
.DEFAULT_GOAL = $(PROG)
else
.DEFAULT_GOAL = nocopyprofile
endif

endif

else
$(error Invalid value $(PROFILE) of PROFILE. Must be one of [$(SYSTEMS)])
endif

endif

.PHONY: deps PRINT nocopyprofile copyprofile help clean probe docs tests dist dist_minimal sources asd-tests sld-tests gneb-tests lib python f2py  $(MDIR) $(SYSTEMS)

# Including the help files
include make/makefileHELP
include make/makefileHELPDEFAULTS

PRINT:
	@echo $@

deps:
	@./make/generateDependencies.py

probe:
	@./make/suggestProfiles.py

docs:
	@cd ../docs; doxygen Doxyfile; cd Manual; pdflatex UppASDmanual.tex

tests:
	@echo ''
	@echo 'To run tests for selected functionalies, run:' 
	@echo '`make asd-tests`, `make sld-tests`, and/or `make gneb-tests`'
	@echo ''
	@echo 'For regression test, run `make regression-test`'
	@echo ''

asd-tests:
	@cd ../tests; python -u ./bergtest.py --file regulartests.yaml | tee tests.log
	@cd ../tests; python -u ./bergtest.py --clean

sld-tests:
	@cd ../tests; python -u ./bergtest.py --file sldtests.yaml | tee tests.log
	@cd ../tests; python -u ./bergtest.py --clean

gneb-tests:
	@cd ../tests; python -u ./bergtest.py --file regressionGNEB_15d7169b.yaml | tee tests.log
	@cd ../tests; python -u ./bergtest.py --clean

regression-test:
	@cd ../tests; python -u ./bergtest.py --file regressionResaro.yaml | tee regression-tests.log
	@cd ../tests; python -u ./bergtest.py --clean


python: lib f2py

lib:
	@$(MAKE) PROFILE=$(PROFILE) clean
	@echo 'Building static fortran library'
	@$(MAKE) PROFILE=$(PROFILE) $(LIBNAME) COMPILENOW=T LIBRARY=T -j 4 --no-print-directory

f2py:
	@echo 'Building f2py python library'
	@$(MAKE) PROFILE=$(PROFILE) $(PYNAME)$(PY_SUFFIX) COMPILENOW=T -j 4 --no-print-directory

# Clean all .mod and .o files as well as mod and obj folders
clean:
	rm -f $(PROG) *.o */*.o *.mod */*.mod make.config.bak */*/*.o */*/*/*.o *.so *.a *.pyf

# Copy file if user tried to make with a profile that only exists in default-profiles
copyprofile:
	$(shell cp ./make/default-profiles/$(PROFILE).make ./$(makeprofile))
	@echo "WARNING: Could not locate user profile:  " $(makeprofile)
	@echo "WARNING: Copying corresponding file from: " make/default-profiles/$(PROFILE).make
	@$(MAKE) PROFILE=$(PROFILE) $(PROG) COMPILENOW=T -j 4 --no-print-directory

nocopyprofile:
	@echo "Building target $(PROG) using profile $(PROFILE) "
	@$(MAKE) PROFILE=$(PROFILE) $(PROG) COMPILENOW=T -j 4 --no-print-directory

# Run same make file but with proper profile syntax and parallel make and print to log file
$(SYSTEMS):
	@echo "FILE CREATED:\n $(shell date)\n" > $(MAKELOG)
	@echo "MAKE:\n $(MAKE) PROFILE=$@ -j 4 \n" >> $(MAKELOG)
	@echo "$@" > $(CURRENT)
	@$(MAKE) PROFILE=$@ --no-print-directory
	@if [ ! -d ../bin ] ; then mkdir ../bin ; fi
	@cp ../source/sd ../bin/sd.$@

################################################################################
# Setting up and executing the Rules
################################################################################
ifdef COMPILENOW

# Including external generated rules. Basically dependency between all fortran .o and .mod files.
# Check if CUDA support will be used, in that case add the proper preprocessing flag
include make/dependencies.make
include make/objs.make


################################################################################
# OVF support
################################################################################
ifeq ($(USE_OVF),YES)
   # Including the third party definitions
   include make/dependencies_tp_c.make
   include make/objs_tp_c.make
   include Third_party/ovf/ovf.make
   OVFLIBFLAGS= $(OVFCCOMPLAGS) 
else
   OBJS_T := $(OBJS)
   OBJS := $(filter-out Third_party/ovf/fortran/ovf.o,$(OBJS_T))
   OBJS_T := $(COBJS)
   COBJS := $(filter-out Third_party/ovf/src/ovf.o,$(OBJS_T))
endif

################################################################################
#FFTW support
################################################################################
ifeq ($(USE_FFTW),YES)
   FFTLIBFLAGS := -I/usr/local/include/ -lfftw3 -lm -DUSE_FFTW=USE_FFTW
else
   OBJS_T := $(OBJS)
   OBJS := $(filter-out Hamiltonian/fftdipole_fftw.o,$(OBJS_T))
   FFTLIBFLAGS :=
endif

ifeq ($(USE_MKL_FFT),YES)
   #MKLROOT := $(shell source compilervars.sh intel64 && echo $${MKLROOT})
   MKLROOT := $(shell echo $${MKLROOT})
   FFTLIBFLAGS := -DUSE_MKL_FFT=USE_MKL_FFT -I${MKLROOT}/include
else
   OBJS_T := $(OBJS)
   OBJS := $(filter-out Hamiltonian/fftdipole_mkl.o,$(OBJS_T))
   FFTLIBFLAGS +=$(FFTLIBFLAGS)
endif
################################################################################
#CUDA support activated
################################################################################
ifeq ($(USE_CUDA),YES)
# Include dependencies for the C files
include make/dependencies_c.make
include make/objs_c.make
CUDAPP := -DCUDA 
OBJS_T := $(OBJS)
OBJS := $(filter-out nocuda.o,$(OBJS_T))
# Add GPU and C/C++ files to the fortran objs
OBJS += $(COBJS)
# Include mod, obj and gpu folder in search path
VPATH := $(GPUDIR)
# Sort out true and false settings for CUDA/C/C++
CCU_FLAGS  := $(shell awk '{if($$2=="=" && $$3=="T") print "-"$$1}' $(makeprofile))
# Grouping flags common to CUDA C and C++
CCU_FLAGS += $(CUDA_INC) $(C_FCFLAG)
else
################################################################################
#CUDA support not activated
################################################################################

CUDAPP :=
OBJS_T := $(OBJS)
OBJS := $(filter-out chelper.o,$(OBJS_T))
# Add GPU and C/C++ files to the fortran objs
OBJS += $(COBJSTP)
CXXFLAGS += $(C_FCFLAG)

endif

################################################################################
#Check if the Intel Vector Statistical Library will be used for RNG
################################################################################
ifeq ($(USE_VSL),YES)
   VSLPP := -DVSL
else
   VSLPP :=
endif
################################################################################
# Check for the git version of the code
################################################################################
GIT_VERSION := $(shell git describe --abbrev=4 --dirty --always --tags)
ver_length := $(words GIT_VERSION)
ifneq (ver_length,0)
VERFLAGS :=-DVERSION=\"$(GIT_VERSION)\"
else
VERFLAGS :=
endif
################################################################################
# Fortran link and compiler flags
################################################################################
FFLAGS     := $(FCFLAGS) $(FCDEBUG) $(FCMODFLAG) $(MDIR) $(FCOMPFLAGS) $(PREPROC) $(CUDAPP) $(VSLPP) $(FFTLIBFLAGS) $(VERFLAGS) #$(OVFLIBFLAGS)
FLINKFLAGS := $(FCOMPFLAG) $(FFLAGS) $(FLIBFLAGS)

################################################################################
# Link flags
################################################################################
#LFLAGS     := $(FLINKFLAGS) $(CCLIBFLAGS) $(CXXLIBFLAGS)
LFLAGS     := $(CUDA_LIB) $(CCLIBFLAGS) $(CXXLIBFLAGS) $(FLINKFLAGS) 

################################################################################
# Linking grouped
################################################################################
LINKG      := $(FC) $(LFLAGS) # Libflags needed after objects in linking phase for gfortran

################################################################################
# The different compiler flags and compiler grouped
################################################################################
FORTRANCF  := $(FC) $(FFLAGS)
CCF        := $(CC) $(CCU_FLAGS) $(CCFLAGS) $(CCLIBFLAGS) $(OVFLIBFLAGS)
CPPCF      := $(CXX) $(CCU_FLAGS) $(CXXFLAGS) $(CXXLIBFLAGS) $(OVFLIBFLAGS)
CUDACF     := $(CUDA) $(CCU_FLAGS) $(NVCCFLAGS) $(GENCODE_ARCH) $(CUDA_FLAGS)

################################################################################
# Rule to make uppasd library and prints to log file
################################################################################
$(LIBNAME):  $(filter-out 0sd.o chelper.o,$(OBJS))
	ar rcs $@ $^
	ranlib $@

################################################################################
# Rule to make entire program and prints to log file
################################################################################
$(PROG): $(OBJS)
	-$(LINKG) $(OBJS) -o $@ $(LFLAGS)
	@echo "FORTRAN:\n" $(FORTRANCF) "\n" | sed 's/-\+/\n  &/g' >> $(MAKELOG)
	@echo "C:\n"       $(CCF)       "\n" | sed 's/-\+/\n  &/g' >> $(MAKELOG)
	@echo "CPP:\n"     $(CPPCF)     "\n" | sed 's/-\+/\n  &/g' >> $(MAKELOG)
	@echo "CUDA:\n"    $(CUDACF)    "\n" | sed 's/-\+/\n  &/g' >> $(MAKELOG)
	@echo "LINK:\n"    $(LINKG)     "\n" | sed 's/-\+/\n  &/g' >> $(MAKELOG)

################################################################################
# Fortran compilation
################################################################################
%.mod : %.f90
	$(FORTRANCF) -c $< -o $@

%.o : %.f90  | $(MDIR)
	$(FORTRANCF) -c $< -o $@

%$(PY_SUFFIX)::  %.f90
	@echo $@
	@rm -f f90wrap_*90
	f90wrap -k kind.map -m asd  pyasd.f90  Input/input*90 System/momentdata.f90 System/simulationdata.f90
	#sed -i "s/real(4)/real(8)/g" f90wrap_*90
	f2py-f90wrap -c -m _asd  f90wrap_*.f90 pyasd.o $(LIBNAME) -I$(MDIR) \
          --f90flags='$(FCFLAGS) $(PREPROC)  $(VERFLAGS)' $(FLIBFLAGS) -lstdc++ -lgomp
	#@rm -f uppasd.pyf
###f2py -m $* -h $*.pyf --overwrite-signature $<
###f2py -c $*.pyf  $< $(LIBNAME) -I$(MDIR) \
###		 --f90flags='$(FCFLAGS) $(PREPROC)  $(VERFLAGS)' $(FLIBFLAGS) -lstdc++ -lgomp
#f2py -m uppasd -h uppasd.pyf asdlib.f90
#f2py -c uppasd.pyf asdlib.f90 -L. -lasdlib -Imod --f90flags='-ffree-line-length-0 -O3 -fopenmp -cpp     -DVERSION=\"5.0-594-gcb8d-dirty\"  -llapack -lblas' -lstdc++ -llapack -lblas -lgomp
################################################################################
# C compilation
################################################################################
%.o : %.c
	$(CCF)       -c $< -o $@

################################################################################
# C++ compilation
################################################################################
%.o : %.cpp
	$(CPPCF)     -c $< -o $@

################################################################################
# CUDA compilation
################################################################################
%.o : %.cu
	$(CUDACF)    -c $< -o $@

$(MDIR):
	@if [ ! -d mod ]; then echo "Creating directory $(MDIR)" ;  mkdir -p $@; fi

else

$(PROG)   : help
%.o       : help
%.mod     : help

################################################################################
# Generate a compressed archive
################################################################################
dist:
	@echo "Packaging source, examples, documentation, and tests to ../UppASD_dist.tar.gz"
	@cd ../tests ; ./cleanAll.sh ; cd ../source
	@cd .. ; tar cf ./UppASD_dist.tar \
	./source/*.f90 ./source/*/*.f90 ./source/make/ ./source/gpu_files/ ./source/README/ \
	./source/Third_party/ \
	./examples ./docs/Doxyfile ./docs/*.pdf ./docs/*.tex ASD_GUI/*.py \
	./docs/Manual/*.tex ./docs/Manual/*.ist ./docs/Manual/Pictures/*.png \
	./tests/ ; \
	gzip --best -f ./UppASD_dist.tar

dist_minimal:
	@echo "Packaging source to ../UppASD_src.tar.gz"
	@cd ../tests ; ./cleanAll.sh ; cd ../source
	@cd .. ; tar cf ./UppASD_src.tar \
	./source/*.f90 ./source/*/*.f90 ./source/make/ ./source/gpu_files/ ./source/README/ \
	./source/Third_party/ ; \
	gzip --best -f ./UppASD_src.tar

sources:
	@echo "Packaging source to ./UppASD_src.tar.gz"
	@cd ../tests ; ./cleanAll.sh ; cd ..
	@tar cf ./UppASD_src.tar ./CMakeLists.txt \
	./source/*.f90 ./source/CMakeLists.txt ./source/*/CMakeLists.txt ./source/*/*.f90 ./source/gpu_files/ \
	./source/Third_party/  ./cmake
	@gzip --best -f ./UppASD_src.tar
endif
