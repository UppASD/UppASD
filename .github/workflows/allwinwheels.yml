name: Build wheels on all platforms (beta)

#on: [release]
on: [release, push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: ubuntu-latest, shell: bash, arch: x86_64 }
          - { os: windows-latest, shell: msys2, arch: x86_64 }
          - { os: macos-14, shell: bash, arch: arm64 }
          - { os: macos-13, shell: bash, arch: x86_64 }
        #os: [ubuntu-20.04, macOS-11]
        #os: [ubuntu-latest, windows-latest, macos-14]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell }} {0pyproject.toml}
    continue-on-error: true

    steps:
      - name: Provide fftw, ninja  (macOS)
        if: runner.os == 'macOS'
        run: |
          # fftw3 
          brew install fftw ninja meson
          fftw-wisdom -V
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV

      - name: Provide ninja  (linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y install ninja-build meson libopenblas-dev liblapack-dev

      - name: Provide gfortran (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          path-type: inherit
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-gcc-fortran
            mingw-w64-x86_64-blas
            mingw-w64-x86_64-openblas
            mingw-w64-x86_64-lapack
            mingw-w64-x86_64-fftw
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            git 

      # - name: Provide gfortran (Windows)
      #   if: runner.os == 'Windows'
      #   uses: msys2/setup-msys2@v2
      #   with:
      #     msystem: MINGW64
      #     update: true
      #     path-type: inherit
      #     install: >-
      #       git
      #       make

      #     pacboy: >-
      #       toolchain:p
      #       gcc-fortran:p
      #       blas:p
      #       openblas:p
      #       lapack:p
      #       fftw:p
      #       cmake:p
      #       ninja:p

      #- name: Tell distutils to use mingw (Windows)
      #  if: runner.os == 'Windows'
      #  run: |
      #     #echo "[build]`ncompiler=mingw32" | Out-File -Encoding ASCII ~/pydistutils.cfg
      #     echo "[build]`ncompiler=mingw32" 

      - uses: actions/checkout@v4

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5

      - name: Install cibuildwheel
        #run: python -m pip install cibuildwheel==2.10.1
        run: |
            python -m pip install git+https://github.com/anbergman/cibuildwheel.git@purepath
            python -m pip install ninja numpy scipy

      - name: Build wheels
        run: |
          which gfortran
          pipx run cibuildwheel --output-dir wheelhouse
        # python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value
        env:
          #CIBW_SKIP: cp36* pp38-manylinux* pp39* pp31* cp38-manylinux_i686 
          # CIBW_ENVIRONMENT_WINDOWS: CC=gcc CXX=g++ FC=gfortran
          CIBW_ENVIRONMENT_WINDOWS: >
           CMAKE_PREFIX_PATH="\msys64\mingw64" CC=gcc CXX=g++ FC=gfortran 
          CIBW_ENVIRONMENT_MACOS: CC=gcc-12 CXX=g++-12 FC=gfortran-12
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
          #CIBW_ARCHS_MACOS: "universal2 arm64"
          #FC: gfortran
          #CC: gcc

      - uses: actions/upload-artifact@v4
        with:
          name: uppasd.${{matrix.os}}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build
        run: python -m pip install build wheel setuptools

      - name: Build source distribution
        run: python -m build . --sdist

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: uppasd_sdist
          path: dist/*.tar.gz

