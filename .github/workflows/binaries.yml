name: Build binaries on all platforms (beta)

#on: [release]
on: [release, push, pull_request]

jobs:
  build_wheels:
    name: Build binaries on ${{ matrix.os }} ${{ matrix.icon}}
    strategy:
      matrix:
        include:
          - { icon: '🐧' , os: ubuntu-latest,  shell: bash, arch: x86_64 }
          - { icon: '💻' , os: windows-latest, shell: msys2, arch: x86_64 }
          - { icon: '🍎' , os: macos-14,       shell: bash, arch: arm64 }
          - { icon: '🍏' , os: macos-13,       shell: bash, arch: x86_64 }
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell }} {0}
    continue-on-error: true

    steps:
      - name: Provide fftw, ninja on macOS ${{ matrix.icon}}
        if: runner.os == 'macOS'
        run: |
          # fftw3 
          brew install fftw ninja meson
          fftw-wisdom -V
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV

      - name: Provide ninja on Linux ${{ matrix.icon}}
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y install ninja-build meson libopenblas-dev liblapack-dev

      - name: Provide gfortran on Windows ${{ matrix.icon}}
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          path-type: inherit
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-gcc-fortran
            mingw-w64-x86_64-blas
            mingw-w64-x86_64-openblas
            mingw-w64-x86_64-lapack
            mingw-w64-x86_64-fftw
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            git 

      - uses: actions/checkout@v4

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        run: |
            python -m ensurepip 
            python -m pip install pyyaml


      - name: Build binaries ${{ matrix.icon}}
        run: |
             cmake -S . -G Ninja -B build -DCMAKE_BUILD_TYPE=Release
             cmake --build build --parallel 
             mkdir ./dist
             cp ./bin/sd.* ./dist/uppasd.${{runner.os}}.${{matrix.arch}}.exe

      - name: Test binaries ${{ matrix.icon}}
        run: |
             cd build
             ctest --output-on-failure
             cd ..

      - name: Build packages ${{ matrix.icon}}
        run: |
             cd build
             cpack
             ls
             cd ..

      #- name: Build binaries
      #  run: |
      #       FC=gfortran-13 CC=gcc-13 cmake -S . -B build 
      #       cmake --build build --parallel
      #       mkdir ./dist
      #       echo "uname -a:"
      #       uname -a
      #       echo "runner.name:"
      #       echo ${{runner.name}}
      #       cp ./bin/sd.* ./dist/uppasd.${{matrix.os}}.${{matrix.arch}}
      #       echo "Binary:" uppasd.${{matrix.os}}.${{matrix.arch}}

      - uses: actions/upload-artifact@v4
        with:
          name: uppasd.${{runner.os}}.${{matrix.arch}}
          path: ./dist/uppasd*


      - uses: actions/upload-artifact@v4
        with:
          name: ctest_log.${{runner.os}}.${{matrix.arch}}
          path: ./build/Testing/Temporary/LastTest.log
